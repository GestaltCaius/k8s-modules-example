name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read # required by terraform
  id-token: "write" # gcp auth

env:
  TF_WORKING_DIR: ${{ vars.TF_ACTIONS_WORKING_DIR }}
  TF_VARS_PATH: terraform.tfvars
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  TF_STATE_BUCKET_NAME: ${{ vars.TF_STATE_BUCKET_NAME }}
  TF_STATE_BUCKET_PREFIX: ${{ vars.TF_STATE_BUCKET_PREFIX }}
  TF_WORKSPACE: default

jobs:
  get-configuration:
    name: Download terraform config files
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VARS_FILE: ${{ secrets.TF_VARS_FILE }}
    steps:
      - name: terraform tfvars file setup
        run: echo "$TF_VARS_FILE" > $TF_VARS_PATH

      - uses: actions/upload-artifact@v4
        with:
          name: tfvars
          path: ${{ env.TF_VARS_PATH }}

  terraform-plan:
    name: "terraform plan"
    needs: [get-configuration]
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/terraform
        with:
          bucket: ${{ env.TF_STATE_BUCKET_NAME }}
          prefix: ${{ env.TF_STATE_BUCKET_PREFIX }}
          working_directory: ${{ env.TF_WORKING_DIR }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          tf_action: plan

      # - uses: "google-github-actions/auth@v2"
      #   with:
      #     project_id: ${{ env.GCP_PROJECT_ID }}
      #     workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
      #     # if you want to impersonate a service account, add:
      #     # service_account: my-service-account@my-project.iam.gserviceaccount.com

      # - name: install terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: "~> v1.5.7"

      # - uses: actions/download-artifact@v4
      #   with:
      #     name: tfvars
      #     path: ${{ env.TF_WORKING_DIR }}

      # - uses: ./.github/actions/terraform-init
      #   with:
      #     bucket: ${{ env.TF_STATE_BUCKET_NAME }}
      #     prefix: ${{ env.TF_STATE_BUCKET_PREFIX }}
      #     working_directory: ${{ env.TF_WORKING_DIR }}

      # - name: Terraform Format
      #   run: terraform fmt -check ../..

      # - name: Terraform Plan
      #   run: terraform plan

  terraform-apply:
    needs: [get-configuration, terraform-plan]
    name: terraform apply
    environment: production
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/terraform
        with:
          bucket: ${{ env.TF_STATE_BUCKET_NAME }}
          prefix: ${{ env.TF_STATE_BUCKET_PREFIX }}
          working_directory: ${{ env.TF_WORKING_DIR }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          tf_action: apply
          tf_args: --auto-approve

      # - uses: "google-github-actions/auth@v2"
      #   with:
      #     project_id: ${{ env.GCP_PROJECT_ID }}
      #     workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      # - name: install terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: "~> v1.5.7"

      # - uses: actions/download-artifact@v4
      #   with:
      #     name: tfvars
      #     path: ${{ env.TF_WORKING_DIR }}

      # - uses: ./.github/actions/terraform-init
      #   with:
      #     bucket: ${{ env.TF_STATE_BUCKET_NAME }}
      #     prefix: ${{ env.TF_STATE_BUCKET_PREFIX }}
      #     working_directory: ${{ env.TF_WORKING_DIR }}

      # - name: Terraform Format
      #   run: terraform fmt -check ../..

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve

  terraform-destroy:
    needs: [get-configuration, terraform-plan, terraform-apply]
    if: always()
    name: terraform destroy
    environment: production
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ./.github/actions/terraform
        with:
          bucket: ${{ env.TF_STATE_BUCKET_NAME }}
          prefix: ${{ env.TF_STATE_BUCKET_PREFIX }}
          working_directory: ${{ env.TF_WORKING_DIR }}
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          tf_action: destroy
          tf_args: --auto-approve
