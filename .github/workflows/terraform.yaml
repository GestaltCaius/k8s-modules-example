name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read # required by terraform
  id-token: "write" # gcp auth

env:
  TF_WORKING_DIR: ${{ vars.TF_ACTIONS_WORKING_DIR }}
  TF_VARS_PATH: terraform.tfvars
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_WORKLOAD_IDENTITY_PROVIDER: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  TF_STATE_BUCKET_NAME: ${{ vars.TF_STATE_BUCKET_NAME }}
  TF_STATE_BUCKET_PREFIX: ${{ vars.TF_STATE_BUCKET_PREFIX }}
  TF_WORKSPACE: default

anchors:
  - &terraform-init
    name: terraform init
    run: |
      terraform init \
      -backend-config "bucket=$TF_STATE_BUCKET_NAME" \
      -backend-config "prefix=$TF_STATE_BUCKET_PREFIX" \
      -reconfigure


jobs:
  get-configuration:
    name: Download terraform config files
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VARS_FILE: ${{ secrets.TF_VARS_FILE }}
    steps:
      - name: terraform tfvars file setup
        run: echo "$TF_VARS_FILE" > $TF_VARS_PATH

      - uses: actions/upload-artifact@v4
        with:
          name: tfvars
          path: ${{ env.TF_VARS_PATH }}

  terraform-plan:
    name: "terraform plan"
    needs: [get-configuration]
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          # if you want to impersonate a service account, add:
          # service_account: my-service-account@my-project.iam.gserviceaccount.com

      - name: install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> v1.5.7"

      - uses: actions/download-artifact@v4
        with:
          name: tfvars
          path: ${{ env.TF_WORKING_DIR }}

      # - name: terraform init
      #   run: terraform init -backend-config "bucket=$TF_STATE_BUCKET_NAME" -reconfigure
      - <<: *terraform-init

      - name: Terraform Format
        run: terraform fmt -check ../..

      - name: Terraform Plan
        run: terraform plan

  terraform-apply:
    needs: [get-configuration, terraform-plan]
    name: terraform apply
    environment: production
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: install terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> v1.5.7"

      - uses: actions/download-artifact@v4
        with:
          name: tfvars
          path: ${{ env.TF_VARS_PATH }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      # - name: terraform init
      #   run: |
      #     terraform init \
      #     -backend-config "bucket=$TF_STATE_BUCKET_NAME" \
      #     -backend-config "prefix=$TF_STATE_BUCKET_PREFIX" \
      #     -reconfigure
      - <<: *terraform-init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check ../..

      - name: Terraform Apply
        run: terraform apply -auto-approve
