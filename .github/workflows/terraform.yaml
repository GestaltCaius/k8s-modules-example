name: "Terraform"

on:
  push:
    branches: ["main"]
  pull_request:

permissions:
  contents: read # required by terraform
  id-token: "write" # gcp auth

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ vars.TF_ACTIONS_WORKING_DIR }} # TODO use env vars

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: "google-github-actions/auth@v2"
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> v1.5.7"

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init -backend-config "bucket=${{ vars.TF_STATE_BUCKET_NAME }}" -reconfigure

      - name: terraform workspace
        run: terraform workspace select develop

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check ../..

      - name: terraform tfvars file setup
        env:
          TF_VARS_FILE: ${{ secrets.TF_VARS_FILE }}
        run: echo "$TF_VARS_FILE" > terraform.tfvars

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan

      - uses: trstringer/manual-approval@v1
        with:
          minimum-approvals: 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
